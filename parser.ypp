%{
// C user declarations
#include <iostream>
#include <string>
#include "hw3_output.hpp"
// #include "tokens.hpp"
#include "stypes.hpp"

#define GET_SYM(x) symbolTable.getVarSymbol(STYPE2STD(string, x))
#define GET_SYMTYPE(x) symbolTable.getVarSymbol(STYPE2STD(string, x))->getType()

#define GET_FUNC(x) symbolTable.getFuncSymbol(STYPE2STD(string, x))
#define GET_FUNCTYPE(x) symbolTable.getFuncSymbol(STYPE2STD(string, x))->getType()


namespace yy {
using namespace output;
using namespace hw3;
using namespace std;
}
using namespace output;
using namespace hw3;
using namespace std;

hw3::SymbolTable symbolTable;

%}

%code requires {
   #include "stypes.hpp"
}

/* %define api.prefix {hw3} */

/* %union {
    std::shared_ptr<hw3::ExpC> exp;
    std::shared_ptr<hw3::VarTypeNameC> varTypeName;
    std::shared_ptr<hw3::RetTypeNameC> retType;
    std::shared_ptr<std::vector<std::string> > idList;
    std::shared_ptr<std::vector<std::string> > typeList;
    std::shared_ptr<hw3::IdC> id;
    std::shared_ptr<hw3::StringC> idName;
} */

/* Declarations */
%nonassoc VOID
%nonassoc INT
%nonassoc BYTE
%nonassoc B
%nonassoc BOOL
%nonassoc AUTO
%nonassoc TRUE
%nonassoc FALSE
%nonassoc RETURN
%nonassoc IF

%nonassoc WHILE
%nonassoc BREAK
%nonassoc CONTINUE
%nonassoc SC
%nonassoc COMMENT
%nonassoc ID
%nonassoc NUM
%nonassoc STRING
%nonassoc COMMA
%right ELSE
%right ASSIGN
%left OR
%left AND
%left EQOP
%left RELOP
%left PLUSOP
%left MULTOP
%right NOT
%left LPAREN
%left RPAREN
%left LBRACE
%left RBRACE

%nonassoc SECOND_PRIOR;
%nonassoc FIRST_PRIOR;

%%
/* Rules */
Program:        Funcs                               {}
                ;
Funcs:          /* epsilon */ %empty %prec SECOND_PRIOR    {}
                | FuncDecl Funcs %prec FIRST_PRIOR  {};
FuncDecl:       RetType ID LPAREN Formals           {
                                                        auto formals = STYPE2STD(vector<shared_ptr<IdC> >, $4);
                                                        vector<string> argTypes;
                                                        for (auto i = 0; i < formals.size(); i++) {
                                                            argTypes.push_back(formals[i]->getType());
                                                        }

                                                        shared_ptr<FuncIdC> funcId(NEW(FuncIdC, (STYPE2STD(string, $2), DC(RetTypeNameC, $1)->getTypeName(), argTypes)));
                                                        symbolTable.addSymbol(STYPE2STD(string, $2), funcId);

                                                        symbolTable.addScope(formals.size());
                                                        for (auto i = 0; i < formals.size(); i++) {
                                                            symbolTable.addFormal(formals[i]);
                                                        }
                                                        symbolTable.retType = DC(RetTypeNameC, $1);
                                                    }
                    RPAREN LBRACE Statements RBRACE {
                                                        symbolTable.removeScope();
                                                        symbolTable.retType = nullptr;
                                                    }
;
RetType:        Type                                {$$ = $1;}
                | VOID                              {$$ = NEW(RetTypeNameC, ("VOID"));}
                ;
Formals:        /* Epsilon */%empty                 {$$ = NEWSTD(vector<shared_ptr<IdC> >);}
                | FormalsList                       {$$ = $1;}
;
FormalsList:    FormalDecl                          {
                                                        auto vec = vector<shared_ptr<IdC> >();
                                                        vec.push_back(DC(IdC, $1));
                                                        $$ = NEWSTD_V(vector<shared_ptr<IdC> >, (vec));
                                                    }
                | FormalDecl COMMA FormalsList      {
                                                        STYPE2STD(vector<shared_ptr<IdC> >, $3).push_back(DC(IdC, $1));
                                                        $$ = $3;
                                                    }
                ;
FormalDecl:     TypeDecl                            {$$ = $1;}
                ;
Statements:     Statement                           {}
                | Statements Statement              {}
                ;
OpenScope:      /* epsilon */ %empty                {symbolTable.addScope();};
CloseScope:      /* epsilon */ %empty               {symbolTable.removeScope();};
Statement:      LBRACE OpenScope Statements RBRACE CloseScope
                | TypeDecl SC                       {
                                                        auto symbol = DC(IdC, $1);
                                                        symbolTable.addSymbol(symbol->getName(), symbol);
                                                    }
                | TypeDecl ASSIGN Exp SC            {
                                                        auto symbol = DC(IdC, $1);
                                                        symbolTable.addSymbol(symbol->getName(), symbol);
                                                        if (not areStrTypesCompatible(symbol->getType(), DC(ExpC, $3)->getType())) {
                                                            errorMismatch(yylineno);
                                                        }
                                                    }
                | AUTO ID ASSIGN Exp SC             {symbolTable.addSymbol(STYPE2STD(string, $2), NEW(IdC,(STYPE2STD(string, $2), DC(ExpC, $4)->getType())));}
                | ID ASSIGN Exp SC                  {
                                                        if (not areStrTypesCompatible(GET_SYMTYPE($1), DC(ExpC,$3)->getType())) {
                                                            errorMismatch(yylineno);
                                                        }
                                                    }
                | Call SC                           {}
                | RETURN SC                         {
                                                        if (symbolTable.retType == nullptr) {
                                                            throw "This should be impossible. Syntax error wise";
                                                        } else if (symbolTable.retType->getTypeName() != "VOID") {
                                                            errorMismatch(yylineno);
                                                        }
                                                    }
                | RETURN Exp SC                     {
                                                        if (symbolTable.retType == nullptr) {
                                                            throw "This should be impossible. Syntax error wise";
                                                        } else if (not areStrTypesCompatible(symbolTable.retType->getTypeName(), DC(ExpC, $2)->getType())) {
                                                            errorMismatch(yylineno);
                                                        }
                                                    }
                | IF LPAREN BoolExp RPAREN OpenScope Statement CloseScope %prec IF {}
                | IF LPAREN BoolExp RPAREN OpenScope Statement CloseScope ELSE OpenScope Statement CloseScope
                | WHILE LPAREN BoolExp RPAREN {symbolTable.nestedLoopDepth++;} OpenScope Statement CloseScope {symbolTable.nestedLoopDepth--;}
                | BREAK SC                          {
                                                        if (symbolTable.nestedLoopDepth == 0) {
                                                            errorUnexpectedBreak(yylineno);
                                                        }
                                                    }
                | CONTINUE SC                       {
                                                        if (symbolTable.nestedLoopDepth == 0) {
                                                            errorUnexpectedContinue(yylineno);
                                                        }
                                                    }
                ;
TypeDecl:       Type ID                             { $$ = NEW(IdC, (STYPE2STD(string, $2), DC(VarTypeNameC, $1)->getTypeName())); }
                ;
Call:           ID LPAREN ExpList RPAREN            {
                                                        auto funcId = GET_FUNC($1);

                                                        if (funcId->getArgTypes().size() != STYPE2STD(vector<string>, $3).size()) {
                                                            errorPrototypeMismatch(yylineno, funcId->getName(), funcId->getArgTypes());
                                                        } else {
                                                            for (int i = 0; i < STYPE2STD(vector<string>, $3).size(); i++) {
                                                                if (not areStrTypesCompatible(funcId->getArgTypes()[i], STYPE2STD(vector<string>, $3)[i])) {
                                                                    errorPrototypeMismatch(yylineno, funcId->getName(), funcId->getArgTypes());
                                                                }
                                                            }

                                                            $$ = NEW(RetTypeNameC, (funcId->getType()));
                                                        }
                                                    }
                | ID LPAREN RPAREN                  {
                                                        auto funcId = GET_FUNC($1);
                                                        if (funcId->getArgTypes().size() != 0) {
                                                            errorPrototypeMismatch(yylineno, funcId->getName(), funcId->getArgTypes());
                                                        } else {
                                                            $$ = NEW(RetTypeNameC, (funcId->getType()));
                                                        }
                                                    }
                ;
ExpList:        Exp                                 {
                                                        $$ = NEWSTD(vector<string>);
                                                        VECS($$).push_back(DC(ExpC, $1)->getType());
                                                    }
                | Exp COMMA ExpList                 {
                                                        VECS($3).push_back(DC(ExpC, $1)->getType());
                                                        $$ = $3;
                                                    }
                ;
Type:           INT                                 {$$ = NEW(VarTypeNameC, ("INT"));}
                | BYTE                              {$$ = NEW(VarTypeNameC, ("BYTE"));}
                | BOOL                              {$$ = NEW(VarTypeNameC, ("BOOL"));}
                ;
BoolExp: Exp                                        {verifyBoolType($1); $$ = $1;}
Exp:            LPAREN Exp RPAREN                   {$$ = $2;}
                | Exp PLUSOP Exp                    {
                                                        if (not isImpliedCastAllowed($1, $3)) {
                                                            errorMismatch(yylineno);
                                                        } else if (DC(ExpC, $1)->isInt() or DC(ExpC, $3)->isInt()) {
                                                            $$ = NEW(ExpC,("INT"));
                                                        } else /* Both are bytes */ {
                                                            $$ = NEW(ExpC,("BYTE"));
                                                        }
                                                    }
                | Exp MULTOP Exp                    {
                                                        if (not isImpliedCastAllowed($1, $3)) {
                                                            errorMismatch(yylineno);
                                                        } else if (DC(ExpC, $1)->isInt() or DC(ExpC, $3)->isInt()) {
                                                            $$ = NEW(ExpC,("INT"));
                                                        } else /* Both are bytes */ {
                                                            $$ = NEW(ExpC,("BYTE"));
                                                        }
                                                    }
                | ID                                {$$ = NEW(ExpC,(GET_SYMTYPE($1)));}
                | Call                              {$$ = NEW(ExpC,(DC(RetTypeNameC, $1)->getTypeName()));}
                | NUM                               {$$ = NEW(ExpC,("INT"));}
                | NUM B                             {
                                                        if (stoi(STYPE2STD(string, $1)) > 255) {
                                                            errorByteTooLarge(yylineno, STYPE2STD(string, $1));
                                                        }
                                                        $$ = NEW(ExpC,("BYTE"));
                                                        }
                | STRING                            {$$ = NEW(ExpC,("STRING"));}
                | TRUE                              {$$ = NEW(ExpC,("BOOL"));}
                | FALSE                             {$$ = NEW(ExpC,("BOOL"));}
                | NOT Exp                           {
                                                        if (not DC(ExpC, $2)->isBool()) {
                                                            errorMismatch(yylineno);
                                                        }

                                                        $$ = NEW(ExpC, ("BOOL"));
                                                    }
                | Exp AND Exp                       {
                                                        if (not DC(ExpC, $1)->isBool() or not DC(ExpC, $3)->isBool()) {
                                                            errorMismatch(yylineno);
                                                        }

                                                        $$ = NEW(ExpC,("BOOL"));
                                                    }
                | Exp OR Exp                        {
                                                        if (not DC(ExpC, $1)->isBool() or not DC(ExpC, $3)->isBool()) {
                                                            errorMismatch(yylineno);
                                                        }

                                                        $$ = NEW(ExpC,("BOOL"));
                                                    }
                | Exp RELOP Exp                     {
                                                        if (not isImpliedCastAllowed($1, $3)) {
                                                            errorMismatch(yylineno);
                                                        }

                                                        $$ = NEW(ExpC,("BOOL"));
                                                    }
                | Exp EQOP Exp                      {
                                                        if (not isImpliedCastAllowed($1, $3)) {
                                                            errorMismatch(yylineno);
                                                        }

                                                        $$ = NEW(ExpC,("BOOL"));
                                                    }
                | LPAREN Type RPAREN Exp            { 
                                                        auto castDstType = DC(VarTypeNameC, $2)->getTypeName();
                                                        auto castSrcType = DC(ExpC, $4)->getType();
                                                        if (not areStrTypesCompatible(castDstType, castSrcType) 
                                                            and not areStrTypesCompatible(castSrcType, castDstType)) {
                                                                errorMismatch(yylineno);
                                                        }
                                                        $$ = NEW(ExpC, (castDstType));
                                                    }
                ;
%%


/* User routines */
int main() {
    yyparse();
    verifyMainExists(symbolTable);
    return 0;
}
