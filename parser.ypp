%{
// C user declarations
#include <iostream>
#include <string>
#include "hw3_output.hpp"
#include "stypes.hpp"
#include "bp.hpp"
#include "symbolTable.hpp"

#define GET_SYM(x) symbolTable.getVarSymbol(STYPE2STD(string, x))
#define GET_SYMTYPE(x) GET_SYM(x)->getType()

#define GET_FUNC(x) symbolTable.getFuncSymbol(STYPE2STD(string, x))
#define GET_FUNCTYPE(x) GET_FUNC(x)->getType()


namespace yy {
using namespace output;
using namespace std;
}
using namespace output;
using namespace std;

SymbolTable symbolTable;

%}

%code requires {
   #include "stypes.hpp"
}

/* Declarations */
%nonassoc VOID
%nonassoc INT
%nonassoc BYTE
%nonassoc B
%nonassoc BOOL
%nonassoc AUTO
%nonassoc TRUE
%nonassoc FALSE
%nonassoc RETURN
%nonassoc IF
%nonassoc WHILE
%nonassoc BREAK
%nonassoc CONTINUE
%nonassoc SC
%nonassoc COMMENT
%nonassoc ID
%nonassoc NUM
%nonassoc STRING
%nonassoc COMMA
%right ELSE
%right ASSIGN
%left OR
%left AND
%left EQOP NEOP
%left GEOP GTOP LEOP LTOP
%left ADDOP SUBOP
%left MULOP DIVOP
%right NOT
%left LPAREN
%left RPAREN
%left LBRACE
%left RBRACE

%nonassoc SECOND_PRIOR;
%nonassoc FIRST_PRIOR;

%%
/* Rules */
Program:        Funcs                               {}
                ;
Funcs:          /* epsilon */ %empty %prec SECOND_PRIOR {}
                | FuncDecl Funcs %prec FIRST_PRIOR  {}
                ;
FuncDecl:       RetType ID LPAREN Formals           {
                                                        vector<shared_ptr<IdC> > vec = STYPE2STD(vector<shared_ptr<IdC> >, $4);
                                                        FuncIdC::startFuncIdWithScope(STYPE2STD(string, $2), DC(RetTypeNameC, $1), vec);
                                                    }
                    RPAREN LBRACE Statements RBRACE { FuncIdC::endFuncIdScope(); }
                ;
RetType:        Type                                { $$ = $1; }
                | VOID                              { $$ = NEW(RetTypeNameC, ("VOID")); }
                ;
Formals:        /* Epsilon */ %empty                { $$ = NEWSTD(vector<shared_ptr<IdC> >); }
                | FormalsList                       { $$ = $1; }
                ;
FormalsList:    FormalDecl                          { $$ = NEWSTD_V(vector<shared_ptr<IdC> >, ((vector<shared_ptr<IdC> >) {DC(IdC, $1)})); }
                | FormalDecl COMMA FormalsList      { STYPE2STD(vector<shared_ptr<IdC> >, ($$ = $3)).push_back(DC(IdC, $1)); }
                ;
FormalDecl:     TypeDecl                            { $$ = $1; }
                ;
Statements:     Statement                           {}
                | Statements Statement              {}
                ;
OpenScope:      /* epsilon */ %empty                { symbolTable.addScope(); };
CloseScope:     /* epsilon */ %empty                { symbolTable.removeScope(); };
Statement:      LBRACE OpenScope Statements RBRACE CloseScope
                | TypeDecl SC                       { addUninitializedSymbol(symbolTable, $1); }
                | TypeDecl ASSIGN ExpOrFinScBool SC { tryAddSymbolWithExp(symbolTable, $1, $3); }
                | AUTO ID ASSIGN ExpOrFinScBool SC  { addAutoSymbolWithExp(symbolTable, $2, $4); }
                | ID ASSIGN ExpOrFinScBool SC       { tryAssignExp(symbolTable, $1, $3); }
                | Call SC                           {}
                | RETURN SC                         { handleReturn(symbolTable.retType); }
                | RETURN ExpOrFinScBool SC          { handleReturnExp(symbolTable.retType, $2); }
                | IF LPAREN CondBoolExp RPAREN OpenScope IfStart Statement CloseScope %prec IF  { handleIfEnd($3); }
                | IF LPAREN CondBoolExp RPAREN OpenScope IfStart Statement CloseScope ELSE      { $$ = handleIfEnd($3, true); }
                                                                OpenScope  Statement CloseScope { handleElseEnd($10); }
                | WHILE LPAREN Label CondBoolExp RPAREN { handleWhileStart($4, STYPE2STD(string, $3)); } OpenScope Statement CloseScope %prec WHILE { handleWhileEnd($4); }
                | BREAK SC                          { symbolTable.addBreak(); }
                | CONTINUE SC                       { symbolTable.addContinue(); }
                ;
IfStart:        /* epsilon */ %empty                { $$ = getLastScBool(); handleIfStart($$); }
                ;
TypeDecl:       Type ID                             { $$ = NEW(IdC, (STYPE2STD(string, $2), DC(VarTypeNameC, $1)->getTypeName())); }
                ;
Call:           ID LPAREN ExpList RPAREN            { $$ = ExpC::getCallResult(GET_FUNC($1), $3); }
                | ID LPAREN RPAREN                  { $$ = ExpC::getCallResult(GET_FUNC($1), NEWSTD(vector<shared_ptr<ExpC> >)); }
                ;
ExpList:        ExpOrFinScBool                      { $$ = handleExpList($1, nullptr); }
                | ExpOrFinScBool COMMA ExpList      { $$ = handleExpList($1, $3); }

                ;
Type:           INT                                 { $$ = NEW(VarTypeNameC, ("INT")); }
                | BYTE                              { $$ = NEW(VarTypeNameC, ("BYTE")); }
                | BOOL                              { $$ = NEW(VarTypeNameC, ("BOOL")); }
                ;
ExpOrFinScBool: FinScBool %prec SECOND_PRIOR        { $$ = $1; }
                | Exp     %prec FIRST_PRIOR         { $$ = $1; }
                /* | LPAREN FinScBool RPAREN           { $$ = $1; } */ // TODO: Check if this rule is at all needed
                ;
FinScBool:      ScBoolExp                           { $$ = assureScBool($1)->finallizeToExpC();}
                ;
CondBoolExp:    AssureScFromBool                    { $$ = saveScBool($1); }
                ;
Exp:            LPAREN Exp RPAREN                   { $$ = $2; }
                ; 
                | Exp ADDOP Exp                     { $$ = ExpC::getBinOpResult($1, $3, ADDOP); }
                | Exp SUBOP Exp                     { $$ = ExpC::getBinOpResult($1, $3, SUBOP); }
                | Exp MULOP Exp                     { $$ = ExpC::getBinOpResult($1, $3, MULOP); }
                | Exp DIVOP Exp                     { $$ = ExpC::getBinOpResult($1, $3, DIVOP); }
                | ID                                { $$ = ExpC::loadIdValue(GET_SYM($1), symbolTable.stackVariablesPtrReg); }
                | Call                              { $$ = $1 != nullptr ? $1: throw "Can't derive Call from Exp for void functions"; }
                | NUM                               { $$ = NEW(ExpC,("INT", STYPE2STD(string, $1))); }
                | NUM B                             { $$ = NEW(ExpC,("BYTE", STYPE2STD(string, $1))); }
                | STRING                            { $$ = ExpC::loadStringLiteralAddr(STYPE2STD(string, $1)); }
                | TRUE                              { $$ = NEW(ExpC, ("BOOL", "true")); }
                | FALSE                             { $$ = NEW(ExpC, ("BOOL", "false")); }
                ;
AssureScFromBool: Exp                               { $$ = NEW(ShortCircuitBool, (assureExpC($1))); }
                | ScBoolExp                         { $$ = assureScBool($1); }
                ;
ScBoolExp:      NOT AssureScFromBool                { $$ = assureScBool($2)->evalBool(nullptr, nullptr, NOT); }
                | AssureScFromBool AND Label AssureScFromBool     { $$ = assureScBool($1)->evalBool($4, $3, AND); }
                | AssureScFromBool OR Label AssureScFromBool      { $$ = assureScBool($1)->evalBool($4, $3, OR); }
                ;
Exp:              Exp GEOP Exp                      { $$ = ExpC::getCmpResult($1, $3, GEOP); }
                | Exp GTOP Exp                      { $$ = ExpC::getCmpResult($1, $3, GTOP); }
                | Exp LEOP Exp                      { $$ = ExpC::getCmpResult($1, $3, LEOP); }
                | Exp LTOP Exp                      { $$ = ExpC::getCmpResult($1, $3, LTOP); }
                | Exp EQOP Exp                      { $$ = ExpC::getCmpResult($1, $3, EQOP); }
                | Exp NEOP Exp                      { $$ = ExpC::getCmpResult($1, $3, NEOP); }
                | LPAREN Type RPAREN Exp            { $$ = NEW(ExpC, (DC(VarTypeNameC, $2)->getTypeName(), DC(VarTypeNameC, $4)->getTypeName())); }
                ;

Label:           /* epsilon */ %empty                { $$ = NEWSTD_V(string, (CodeBuffer::instance().genLabel("BoolBinOpRight"))); }
                ;
%%


/* User routines */
int main() {
    auto &buffer = CodeBuffer::instance();
    /* try {
        yyparse();
    } catch (Exception e) {
        cout << "Got exception: " << e.what() << endl;
    } */
    yyparse();
    buffer.printGlobalBuffer();
    buffer.printCodeBuffer();
    verifyMainExists(symbolTable);
    return 0;
}
